{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","newQuote","componentDidMount","state","quotes","fetch","then","response","json","data","setState","this","randomNum","Math","floor","random","length","id","class","quoteText","text","quoteAuthor","author","href","target","rel","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAiDeA,E,kDA7Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYNC,SAAW,WACT,EAAKC,qBAZP,EAAKC,MAAQ,CACXC,OAAQ,IAHO,E,qDAOjB,WAAqB,IAAD,OAChBC,MAAM,+BACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEN,OAAQK,S,oBAO5C,WACE,IAAIL,EAASO,KAAKR,MAAMC,OACpBQ,EAAYC,KAAKC,MAAMD,KAAKE,SAAWX,EAAOY,QAElD,GAAiC,IAA7BL,KAAKR,MAAMC,OAAOY,OACpB,OACE,qBAAKC,GAAG,YAAR,SACE,mBAAGC,MAAM,UAAT,0BAIJ,IAAIC,EAAYf,EAAOQ,GAAWQ,KAC9BC,EAAc,KAAKjB,EAAOQ,GAAWU,OAEzC,OACE,sBAAKL,GAAG,YAAR,UACE,oBAAGA,GAAG,OAAN,UAAa,sBAAMC,MAAM,aAAZ,eAAkCC,KAC/C,mBAAGF,GAAG,SAAN,SAAgBI,IAChB,sBAAKJ,GAAG,eAAR,UACE,mBAAGA,GAAG,cAAcM,KAAM,yCAA2CJ,EAAYE,EAAaG,OAAO,SAASC,IAAI,aAAlH,yBACA,mBAAGR,GAAG,YAAYM,KAAK,IAAIG,QAASf,KAAKV,SAAzC,iC,GAtCM0B,IAAMC,WCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9e304043.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      quotes: []\n    }\n  }\n \n    componentDidMount() {\n        fetch('https://type.fit/api/quotes')\n        .then(response => response.json())\n        .then(data => this.setState({ quotes: data}))\n    }\n\n    newQuote = () => {\n      this.componentDidMount();\n    }\n  \n  render() {\n    var quotes = this.state.quotes;\n    var randomNum = Math.floor(Math.random() * quotes.length);\n    \n    if (this.state.quotes.length === 0) {\n      return (\n        <div id=\"quote-box\">\n          <p class=\"loading\">Loading...</p>\n        </div>\n      )\n    } else {\n      var quoteText = quotes[randomNum].text;\n      var quoteAuthor = \"- \"+quotes[randomNum].author;\n\n      return (\n        <div id=\"quote-box\">\n          <p id=\"text\"><span class=\"quote-mark\">\"</span>{quoteText}</p>\n          <p id=\"author\">{quoteAuthor}</p>\n          <div id=\"link-and-btn\">\n            <a id=\"tweet-quote\" href={\"https://twitter.com/intent/tweet?text=\" + quoteText + quoteAuthor} target=\"_blank\" rel=\"noreferrer\">Tweet Quote</a>\n            <a id=\"new-quote\" href=\"#\" onClick={this.newQuote}>New Quote</a>\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}